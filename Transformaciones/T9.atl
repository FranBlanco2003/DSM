-- @nsURI UmlMm=http://DSM/DC_UML
-- @nsURI ErMm=http://DSM/ER_2025

module T9;
create OUT : ErMm from IN : UmlMm;

-- Helper global para buscar tablas por nombre
helper def: lookupTabla(tableName : String, esquema: ErMm!Esquema) : ErMm!Tabla =
  -- 2) Del Esquema, filtro sus tablas por nombre
  esquema
    .tablas.debug('tablas')                       -- colección ErMm!Tabla
    ->select(t | t.nombre = tableName)
	->first() -- Obtenemos la unica
;

-- Genera los esquemas
rule Diagrama_Esquema {
	from
		d : UmlMm!Diagrama  
	to
		esq : ErMm!Esquema(
			nombre <- d.nombre.debug('Creando esquema'),
			tablas <- d.clases->select(c| not c.oclIsTypeOf(UmlMm!ClaseAsociacion) and c.generaliza.oclIsUndefined())->collect(c | thisModule.Clase_Tabla(c))
		)
	do{
		d.clases->select(c | c.oclIsTypeOf(UmlMm!ClaseAsociacion))->collect(c | thisModule.ClaseAsociacion_Tabla(c));
		d.clases->select(c | not c.generaliza.oclIsUndefined())->collect(c | thisModule.Herencia(c));
	}
}

-- Genera las tablas para clases
unique lazy rule Clase_Tabla {
	from
		c : UmlMm!Clase
	to
		tabla : ErMm!Tabla(
			nombre <- c.nombre.debug('Creando tabla'),
			columnas <- (
				c.atributos->collect(a | thisModule.Create_Data_column(a))
				->append(thisModule.Create_ID_column(c))
			)
		)
}

-- Genera las columnas normales de la tabla
unique lazy rule Create_Data_column {
	from
		a : UmlMm!Atributo
	to
		col : ErMm!Columna(
			nombre <- a.nombre.debug('Creando columna'),
			rango <- a.max,
			esUnico <- if a.max = 1 then true else false endif,
			esNulo <- if a.min = 0 then true else false endif,
			tipo <- a.getType()
		)
}

-- Genera la columna ID de la tabla
unique lazy rule Create_ID_column {
	from
		c: UmlMm!Clase
	to
		id_col: ErMm!Columna(
			nombre <- c.nombre + '_id'.debug('Creando tabla id'), 
			tipo <- #integer,
			esPrimaria <- true,
			esUnico <- true,
			rango <- -1
		)
}

-- Helper para obtener el tipo del atributo
helper context UmlMm!Atributo def: getType() : ErMm!TiposER = 
	if self.tipo = #entero then #integer
	else if self.tipo = #boolean then #integer
	else if self.tipo = #cadena then #string
	else if self.tipo = #real then #double
	else if self.tipo = #fecha then #fecha
	else #integer 
	endif endif endif endif endif;


-- genera las claves ajenas
lazy rule Relacion_ClaveAjena {
	from
		r : UmlMm!Relacion 
		( not ( r.finRelacion.first().max.intValue() = -1 and r.claseasociacion.oclIsUndefined()))
	using {
		-- extremos de la relación
		extremos : Sequence(UmlMm!FinRelacion) = r.finRelacion->asSequence();
		extremo1 : UmlMm!FinRelacion = extremos->first();
		extremo2 : UmlMm!FinRelacion = extremos->last();
		extremoDependiente : UmlMm!FinRelacion = extremo1; -- por defecto
		extremoIndependiente : UmlMm!FinRelacion = extremo2;
		esquema : ErMm!Esquema = thisModule.resolveTemp(r.diagrama, 'esq');
		
		-- Variables específicas para relaciones N:M
		esRelacionNM         : Boolean = (extremo1.max = -1 and extremo2.max = -1);
		nombreTablaIntermedia: String = r.nombre + '_Rel';
		nombreColumna1       : String = extremo1.rol + 'ref' + extremo2.rol;
		nombreColumna2       : String = extremo2.rol + 'ref' + extremo1.rol;
		tablaClase1          : ErMm!Tabla = thisModule.lookupTabla(extremo1.clase.nombre, esquema);
		tablaClase2          : ErMm!Tabla = thisModule.lookupTabla(extremo2.clase.nombre, esquema);
	}
	to
		fk : ErMm!ClaveAjena(
			nombre <- (extremo1.rol + 'to' + extremo2.rol)
			.debug('Creando clave ajena'),
			esquema <- esquema,
			columna <- loc,
			referenciada <- thisModule.lookupTabla(extremoIndependiente.clase.nombre, esquema)
			.columnas->select(c | c.esPrimaria)->first()
		),
		-- Columna local de la parte dependiente
		loc : ErMm!Columna(
			nombre <- (extremoDependiente.rol + 'ref'
				+ extremoIndependiente.rol)
				.debug('Creada columna dependiente'),
			rango <- extremoDependiente.max, -- cardinalidad máxima
			esUnico <- extremoDependiente.max = 1,
			esNulo <- extremoDependiente.min = 0,
			tipo <- #integer,
			tabla <- thisModule.lookupTabla(extremoDependiente.clase.nombre, esquema)
		)
	do {
	-- caso 1–1 o 0..1–1
		if (extremo1.max = 1 and extremo2.max = 1) {
			if (extremo2.composicion or (extremo2.max = 1 and extremo2.min = 1)) {
				extremoDependiente <- extremo2;
				extremoIndependiente <- extremo1;
			}
		}
		-- caso 0/1..* – 0/1..1
		else if ((extremo1.max = -1 and extremo2.max = 1) or (extremo1.max = 1 and extremo2.max = -1)) {
			if (extremo2.max = -1) {
				extremoDependiente <- extremo2;
				extremoIndependiente <- extremo1;
			}
		}
	}
}

rule RelacionAFKM2M {
	from
	rel : UmlMm!Relacion (rel.finRelacion.first().max.intValue() = -1 and rel.claseasociacion.oclIsUndefined())
	using{
		esquema : ErMm!Esquema = thisModule.resolveTemp(rel.diagrama, 'esq');
	}
	to
	tablaRelacion : ErMm!Tabla (
		nombre <- 'Relacion_' + rel.finRelacion.first().rol + 'con' + rel.finRelacion.last().rol.debug('tabla creada'),
		columnas <- Sequence{columnaFK1, columnaFK2},
		esquema <- rel.diagrama
	),
	columnaFK1 : ErMm!Columna (
		nombre <- 'id_FK_' + rel.finRelacion.first().rol,
		tipo <- #integer,
		tabla <- tablaRelacion,
		esPrimaria <- true
	),
	columnaFK2 : ErMm!Columna (
		nombre <- 'id_FK_' + rel.finRelacion.last().rol,
		tipo <- #integer,
		tabla <- tablaRelacion,
		esPrimaria <- true
	),
	fk1 : ErMm!ClaveAjena (
		nombre <- 'FK_' + rel.finRelacion.first().rol,
		columna <- columnaFK1,
		referenciada <- thisModule.lookupTabla(rel.finRelacion.first().clase.nombre, esquema)
		.columnas->select(c | c.esPrimaria)->first(),
		esquema <- rel.diagrama
	),
	fk2 : ErMm!ClaveAjena (
		nombre <- 'FK_' + rel.finRelacion.last().rol,
		columna <- columnaFK2,
		referenciada <- thisModule.lookupTabla(rel.finRelacion.last().clase.nombre, esquema)
		.columnas->select(c | c.esPrimaria)->first(),
		esquema <- rel.diagrama
	)
}

-- Maneja las clases de asociación creando una tabla con FKs para las dos clases asociadas
lazy rule ClaseAsociacion_Tabla {
  from
    ca : UmlMm!ClaseAsociacion
  using {
    -- Esquema de la asociación
    esquema : ErMm!Esquema = thisModule.resolveTemp(ca.asociacion.diagrama, 'esq');
    clase1 : UmlMm!Clase = ca.asociacion.finRelacion->first().clase;
    clase2 : UmlMm!Clase = ca.asociacion.finRelacion->last().clase;
    -- Tablas para las clases asociadas
    tabla1 : ErMm!Tabla = thisModule.lookupTabla(clase1.nombre.debug('a'), esquema);
    tabla2 : ErMm!Tabla = thisModule.lookupTabla(clase2.nombre, esquema);
    
    -- Columnas ID de las tablas asociadas
    pk1 : ErMm!Columna = tabla1
						.columnas->select(c | c.esPrimaria)->first();
    pk2 : ErMm!Columna = tabla2
						.columnas->select(c | c.esPrimaria)->first();
  }
  to
    -- Tabla de la clase de asociación
    tablaAsociacion : ErMm!Tabla (
      nombre <- ca.nombre.debug('Creating association table: '),
      esquema <- esquema,
      columnas <- Sequence{
        thisModule.Create_ID_column(ca).debug('Created ID column: '),
        fk1_col.debug('Created FK1 column: '), 
        fk2_col.debug('Created FK2 column: ')
      }->union(
        ca.atributos->collect(a | thisModule.Create_Data_column(a).debug('Created attribute column: '))
      )
    ),
    
    -- Columna FK para la primera clase asociada
    fk1_col : ErMm!Columna (
      nombre <- (clase1.nombre + '_ref').debug('Creating FK1 column named: '),
      tipo <- #integer,
      esUnico <- false,
      esNulo <- false,
      rango <- -1,
      tabla <- tablaAsociacion
    ),
    
    -- Columna FK para la segunda clase asociada
    fk2_col : ErMm!Columna (
      nombre <- (clase2.nombre + '_ref').debug('Creating FK2 column named: '), 
      tipo <- #integer,
      esUnico <- false,
      esNulo <- false,
      rango <- -1,
      tabla <- tablaAsociacion
    ),
    
    -- FK para la primera clase asociada
    fk1 : ErMm!ClaveAjena (
      nombre <- ('FK_' + ca.nombre + '_' + clase1.nombre).debug('Creating FK1 constraint named: '),
      esquema <- esquema,
      columna <- fk1_col,
      referenciada <- pk1
    ),
    
    -- FK para la segunda clase asociada
    fk2 : ErMm!ClaveAjena (
      nombre <- ('FK_' + ca.nombre + '_' + clase2.nombre).debug('Creating FK2 constraint named: '),
      esquema <- esquema,
      columna <- fk2_col,
      referenciada <- pk2
    )
}

lazy rule Herencia{
	from
		ch: UmlMm!Clase
	using{
		clasePadre: UmlMm!Clase = ch.generaliza;
		claseHijo: UmlMm!Clase = ch;
		esquema: ErMm!Esquema = thisModule.resolveTemp(ch.diagrama, 'esq');
		tablaPadre: ErMm!Tabla = thisModule.lookupTabla(ch.generaliza.nombre, esquema);
	}
	to
	col_Hijo_padre : ErMm!Columna (
      nombre <- (clasePadre.nombre + '_ref').debug('FK clase hijo'), 
      tipo <- #integer,
      esUnico <- false,
      esNulo <- false,
	  esPrimaria <- true,
      rango <- -1,
      tabla <- tabla
    ),
	tabla : ErMm!Tabla(
			nombre <- ch.nombre.debug('Creando tabla'),
			columnas <- (
				ch.atributos->collect(a | thisModule.Create_Data_column(a))
			),
			esquema <- esquema
	),
	
	FK : ErMm!ClaveAjena (
      nombre <- ('FK_' + ch.nombre + '_' + clasePadre.nombre).debug('Creating FK2 constraint named: '),
      esquema <- esquema,
      columna <- col_Hijo_padre,
      referenciada <- tablaPadre.columnas->select(c| c.esPrimaria)->first()
    )
}