-- @nsURI UmlMm=http://DSM/DC_UML
-- @nsURI ErMm=http://DSM/ER_2025
-- @nsuri UmlMm=http://DSM/DC_UML
-- @nsuri ErMm=http://DSM/ER_2025

module T7;
create OUT : ErMm from IN : UmlMm;

-- genera los esquemas
rule Diagrama_Esquema {
	from
	d : UmlMm!Diagrama
	to
	esq : ErMm!Esquema(
		nombre <- d.nombre.debug('Creando esquema'),
		tablas <- d.clases->collect(c | thisModule.Clase_Tabla(c))
	)
}

-- genera las claves ajenas
rule Relacion_ClaveAjena {
	from
		r : UmlMm!Relacion 
		( not ( r.finRelacion.first().max.intValue() = -1 and r.claseasociacion.oclIsUndefined()))
	using {
		-- extremos de la relación
		extremos : Sequence(UmlMm!FinRelacion) = r.finRelacion->asSequence();
		extremo1 : UmlMm!FinRelacion = extremos->first();
		extremo2 : UmlMm!FinRelacion = extremos->last();
		extremoDependiente : UmlMm!FinRelacion = extremo1; -- por defecto
		extremoIndependiente : UmlMm!FinRelacion = extremo2;
		esquema : ErMm!Esquema = thisModule.resolveTemp(r.diagrama, 'esq');
		
		-- Variables específicas para relaciones N:M
		esRelacionNM         : Boolean = (extremo1.max = -1 and extremo2.max = -1);
		nombreTablaIntermedia: String = r.nombre + '_Rel';
		nombreColumna1       : String = extremo1.rol + 'ref' + extremo2.rol;
		nombreColumna2       : String = extremo2.rol + 'ref' + extremo1.rol;
		tablaClase1          : ErMm!Tabla = r.lookupTabla(extremo1.clase.nombre);
		tablaClase2          : ErMm!Tabla = r.lookupTabla(extremo2.clase.nombre);
		
	}
	to
		fk : ErMm!ClaveAjena(
			nombre <- (extremo1.rol + 'to' + extremo2.rol)
			.debug('Creando clave ajena'),
			esquema <- esquema,
			columna <- loc,
			referenciada <- r.lookupTabla(extremoIndependiente.clase.nombre)
			.columnas->select(c | c.esPrimaria)->first()
		),
		-- Columna local de la parte dependiente
		loc : ErMm!Columna(
			nombre <- (extremoDependiente.rol + 'ref'
				+ extremoIndependiente.rol)
				.debug('Creada columna dependiente'),
			rango <- extremoDependiente.max, -- cardinalidad máxima
			esUnico <- extremoDependiente.max = 1,
			esNulo <- extremoDependiente.min = 0,
			tipo <- #integer,
			tabla <- r.lookupTabla(extremoDependiente.clase.nombre)
		)
	do {
	-- caso 1–1 o 0..1–1
		if (extremo1.max = 1 and extremo2.max = 1) {
			if (extremo2.composicion or (extremo2.max = 1 and extremo2.min = 1)) {
				extremoDependiente <- extremo2;
				extremoIndependiente <- extremo1;
			}
		}
		-- caso 0/1..* – 0/1..1
		else if ((extremo1.max = -1 and extremo2.max = 1) or (extremo1.max = 1 and extremo2.max = -1)) {
			if (extremo2.max = -1) {
				extremoDependiente <- extremo2;
				extremoIndependiente <- extremo1;
			}
		}
	}
}

rule RelacionAFKM2M {
	from
	rel : UmlMm!Relacion (rel.finRelacion.first().max.intValue() = -1 and rel.claseasociacion.oclIsUndefined())
	to
	tablaRelacion : ErMm!Tabla (
		nombre <- 'Relacion_' + rel.finRelacion.first().rol + 'con' + rel.finRelacion.last().rol.debug('tabla creada supongo'),
		columnas <- Sequence{columnaFK1, columnaFK2},
		esquema <- rel.diagrama
	),
	columnaFK1 : ErMm!Columna (
		nombre <- 'id_FK_' + rel.finRelacion.first().rol,
		tipo <- #integer,
		tabla <- tablaRelacion,
		esPrimaria <- true
	),
	columnaFK2 : ErMm!Columna (
		nombre <- 'id_FK_' + rel.finRelacion.last().rol,
		tipo <- #integer,
		tabla <- tablaRelacion,
		esPrimaria <- true
	),
	fk1 : ErMm!ClaveAjena (
		nombre <- 'FK_' + rel.finRelacion.first().rol,
		columna <- columnaFK1,
		referenciada <- rel.lookupTabla(rel.finRelacion.first().clase.nombre)
		.columnas->select(c | c.esPrimaria)->first(),
		esquema <- rel.diagrama
	),
	fk2 : ErMm!ClaveAjena (
		nombre <- 'FK_' + rel.finRelacion.last().rol,
		columna <- columnaFK2,
		referenciada <- rel.lookupTabla(rel.finRelacion.last().clase.nombre)
		.columnas->select(c | c.esPrimaria)->first(),
		esquema <- rel.diagrama
	)
}

-- helper para buscar la tabla ER correspondiente a una clase UML
helper context UmlMm!Relacion def: lookupTabla(tableName : String)
: ErMm!Tabla =
let esquema : ErMm!Esquema = thisModule.resolveTemp(
self.diagrama, 'esq')
in
esquema.tablas
->select(t | t.nombre = tableName)
->first();

-- genera una tabla por cada clase
unique lazy rule Clase_Tabla {
from
	c : UmlMm!Clase
to
	tabla : ErMm!Tabla(
	nombre <- c.nombre.debug('Creando tabla'),
	columnas <- c.atributos
	->collect(a | thisModule.Create_Data_column(a))
	->append(thisModule.Create_ID_column(c))
	)
}

-- genera las columnas de datos
unique lazy rule Create_Data_column {
from
	a : UmlMm!Atributo
to
	col : ErMm!Columna(
	nombre <- a.nombre.debug('Creando columna'),
	rango <- a.max,
	esUnico <- if a.max = 1 then true else false endif,
	esNulo <- if a.min = 0 then true else false endif,
	tipo <- a.getType()
	)
}

-- helper para mapear tipos de atributos a tipos ER
helper context UmlMm!Atributo def: getType() : ErMm!TiposER =
if (self.tipo = #entero or self.tipo = #boolean) then #integer
else if self.tipo = #cadena then #string
else if self.tipo = #real then #double
else if self.tipo = #fecha then #fecha
else #integer
endif endif endif endif;

-- genera la columna de clave primaria ID
unique lazy rule Create_ID_column {
from
	c : UmlMm!Clase
to
	id_col : ErMm!Columna(
	nombre <- c.nombre + '_id'.debug('Creando tabla id'),
	tipo <- #integer,
	esPrimaria <- true,
	esUnico <- true,
	rango <- -1
	)
}