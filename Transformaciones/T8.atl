-- @nsURI UmlMm=http://DSM/DC_UML
-- @nsURI ErMm=http://DSM/ER_2025

module T8;
create OUT : ErMm from IN : UmlMm;

-- Helper global para buscar tablas por nombre
helper def: lookupTabla(diagrama : UmlMm!Diagrama, tableName : String) : ErMm!Tabla =
  let esquema : ErMm!Esquema = thisModule.resolveTemp(diagrama, 'esq')
  in if esquema <> OclUndefined then
      esquema.tablas->select(t | t.nombre = tableName)->first()
     else
      OclUndefined
     endif;

-- Genera los esquemas
rule Diagrama_Esquema {
	from
		d : UmlMm!Diagrama  
	to
		esq : ErMm!Esquema(
			nombre <- d.nombre.debug('Creando esquema'),
			tablas <- d.clases->collect(c | thisModule.Clase_Tabla(c))
		)
}

-- Genera las tablas para clases
unique lazy rule Clase_Tabla {
	from
		c : UmlMm!Clase
	to
		tabla : ErMm!Tabla(
			nombre <- c.nombre.debug('Creando tabla'),
			columnas <- (
				c.atributos->collect(a | thisModule.Create_Data_column(a))
				->append(thisModule.Create_ID_column(c))
			)
		)
}

-- Genera las columnas normales de la tabla
unique lazy rule Create_Data_column {
	from
		a : UmlMm!Atributo
	to
		col : ErMm!Columna(
			nombre <- a.nombre.debug('Creando columna'),
			rango <- a.max,
			esUnico <- if a.max = 1 then true else false endif,
			esNulo <- if a.min = 0 then true else false endif,
			tipo <- a.getType()
		)
}

-- Genera la columna ID de la tabla
unique lazy rule Create_ID_column {
	from
		c: UmlMm!Clase
	to
		id_col: ErMm!Columna(
			nombre <- c.nombre + '_id'.debug('Creando tabla id'), 
			tipo <- #integer,
			esPrimaria <- true,
			esUnico <- true,
			rango <- -1
		)
}

-- Helper para obtener el tipo del atributo
helper context UmlMm!Atributo def: getType() : ErMm!TiposER = 
	if self.tipo = #entero then #integer
	else if self.tipo = #boolean then #integer
	else if self.tipo = #cadena then #string
	else if self.tipo = #real then #double
	else if self.tipo = #fecha then #fecha
	else #integer 
	endif endif endif endif endif;

-- Maneja las clases de asociación creando una tabla con FKs para las dos clases asociadas
rule ClaseAsociacion_Tabla {
  from
    ca : UmlMm!ClaseAsociacion
  using {
    -- Esquema de la asociación
    esquema : ErMm!Esquema = thisModule.resolveTemp(ca.diagrama, 'esq');
    clase1 : UmlMm!Clase = ca.asociacion.finRelacion->first().clase;
    clase2 : UmlMm!Clase = ca.asociacion.finRelacion->last().clase;
    
    -- Tablas para las clases asociadas
    tabla1 : ErMm!Tabla = thisModule.lookupTabla(ca.diagrama, clase1.nombre);
    tabla2 : ErMm!Tabla = thisModule.lookupTabla(ca.diagrama, clase2.nombre);
    
    -- Columnas ID de las tablas asociadas
    pk1 : ErMm!Columna = if tabla1 <> OclUndefined then tabla1.columnas->select(c | c.esPrimaria)->first() else OclUndefined endif;
    pk2 : ErMm!Columna = if tabla2 <> OclUndefined then tabla2.columnas->select(c | c.esPrimaria)->first() else OclUndefined endif;
  }
  to
    -- Tabla de la clase de asociación
    tablaAsociacion : ErMm!Tabla (
      nombre <- ca.nombre.debug('Creating association table: '),
      esquema <- esquema,
      columnas <- Sequence{
        thisModule.Create_ID_column(ca).debug('Created ID column: '),
        fk1_col.debug('Created FK1 column: '), 
        fk2_col.debug('Created FK2 column: ')
      }->union(
        ca.atributos->collect(a | thisModule.Create_Data_column(a).debug('Created attribute column: '))
      )
    ),
    
    -- Columna FK para la primera clase asociada
    fk1_col : ErMm!Columna (
      nombre <- (clase1.nombre + '_ref').debug('Creating FK1 column named: '),
      tipo <- #integer,
      esUnico <- false,
      esNulo <- false,
      rango <- -1,
      tabla <- tablaAsociacion
    ),
    
    -- Columna FK para la segunda clase asociada
    fk2_col : ErMm!Columna (
      nombre <- (clase2.nombre + '_ref').debug('Creating FK2 column named: '), 
      tipo <- #integer,
      esUnico <- false,
      esNulo <- false,
      rango <- -1,
      tabla <- tablaAsociacion
    ),
    
    -- FK para la primera clase asociada
    fk1 : ErMm!ClaveAjena (
      nombre <- ('FK_' + ca.nombre + '_' + clase1.nombre).debug('Creating FK1 constraint named: '),
      esquema <- esquema,
      columna <- fk1_col,
      referenciada <- pk1
    ),
    
    -- FK para la segunda clase asociada
    fk2 : ErMm!ClaveAjena (
      nombre <- ('FK_' + ca.nombre + '_' + clase2.nombre).debug('Creating FK2 constraint named: '),
      esquema <- esquema,
      columna <- fk2_col,
      referenciada <- pk2
    )
}
